@misc{ali_bosche_ford_2018, 
    title={Cybersecurity Is the Key to Unlocking Demand in the Internet of Things}, 
    url={https://www.bain.com/insights/cybersecurity-is-the-key-to-unlocking-demand-in-the-internet-of-things/}, 
    journal={Bain Brief - Bain & Company}, 
    author={Ali, Syed and Bosche, Ann and Ford, Frank}, 
    year={2018}, 
    month=oct
}

@misc{suit, 
    title={Software Updates for Internet of Things (suit)}, 
    url={https://datatracker.ietf.org/wg/suit/about/}, 
    journal={Software Updates for Internet of Things (suit) }
}

@misc{rfc7228,
	series =	{Request for Comments},
	number =	7228,
	howpublished =	{RFC 7228},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7228},
	url =		{https://rfc-editor.org/rfc/rfc7228.txt},
    author =	{Carsten Bormann and Mehmet Ersue and Ari Ker√§nen},
	title =		{{Terminology for Constrained-Node Networks}},
	pagetotal =	17,
	year =		2014,
	month =		may,
	abstract =	{The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.},
}

@misc{rfc768,
	series =	{Request for Comments},
	number =	768,
	howpublished =	{RFC 768},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC0768},
	url =		{https://rfc-editor.org/rfc/rfc768.txt},
    author =	{Jon Postel},
	title =		{{User Datagram Protocol}},
	pagetotal =	3,
	year =		1980,
	month =		aug,
	abstract =	{},
}

@misc{rfc7252,
	series =	{Request for Comments},
	number =	7252,
	howpublished =	{RFC 7252},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7252},
	url =		{https://rfc-editor.org/rfc/rfc7252.txt},
    author =	{Zach Shelby and Klaus Hartke and Carsten Bormann},
	title =		{{The Constrained Application Protocol (CoAP)}},
	pagetotal =	112,
	year =		2014,
	month =		jun,
	abstract =	{The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation. CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.},
}

@misc{rfc7959,
	series =	{Request for Comments},
	number =	7959,
	howpublished =	{RFC 7959},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7959},
	url =		{https://rfc-editor.org/rfc/rfc7959.txt},
    author =	{Carsten Bormann and Zach Shelby},
	title =		{{Block-Wise Transfers in the Constrained Application Protocol (CoAP)}},
	pagetotal =	37,
	year =		2016,
	month =		aug,
	abstract =	{The Constrained Application Protocol (CoAP) is a RESTful transfer protocol for constrained nodes and networks. Basic CoAP messages work well for small payloads from sensors and actuators; however, applications will need to transfer larger payloads occasionally -- for instance, for firmware updates. In contrast to HTTP, where TCP does the grunt work of segmenting and resequencing, CoAP is based on datagram transports such as UDP or Datagram Transport Layer Security (DTLS). These transports only offer fragmentation, which is even more problematic in constrained nodes and networks, limiting the maximum size of resource representations that can practically be transferred. Instead of relying on IP fragmentation, this specification extends basic CoAP with a pair of "Block" options for transferring multiple blocks of information from a resource representation in multiple request-response pairs. In many important cases, the Block options enable a server to be truly stateless: the server can handle each block transfer separately, with no need for a connection setup or other server-side memory of previous block transfers. Essentially, the Block options provide a minimal way to transfer larger representations in a block-wise fashion. A CoAP implementation that does not support these options generally is limited in the size of the representations that can be exchanged, so there is an expectation that the Block options will be widely used in CoAP implementations. Therefore, this specification updates RFC 7252.},
}


@book{rest,
  title={Architectural styles and the design of network-based software architectures},
  author={Fielding, Roy T and Taylor, Richard N},
  volume={7},
  year={2000},
  publisher={University of California, Irvine Irvine, USA}
}


@techreport{suit-architecture,
	number =	{draft-ietf-suit-architecture-02},
	type =		{Internet-Draft},
	institution =	{Internet Engineering Task Force},
	publisher =	{Internet Engineering Task Force},
	note =		{Work in Progress},
	url =		{https://datatracker.ietf.org/doc/html/draft-ietf-suit-architecture-02},
    author =	{Brendan Moran and Milosch Meriac and Hannes Tschofenig and David Brown},
	title =		{{A Firmware Update Architecture for Internet of Things Devices}},
	pagetotal =	22,
	year =		2019,
	month =		jan,
	day =		16,
	abstract =	{Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts. This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices. The architecture is agnostic to the transport of the firmware images and associated meta-data. This version of the document assumes asymmetric cryptography and a public key infrastructure. Future versions may also describe a symmetric key approach for very constrained devices.},
}


@techreport{suit-information-model,
	number =	{draft-ietf-suit-information-model-01},
	type =		{Internet-Draft},
	institution =	{Internet Engineering Task Force},
	publisher =	{Internet Engineering Task Force},
	note =		{Work in Progress},
	url =		{https://datatracker.ietf.org/doc/html/draft-ietf-suit-information-model-01},
    author =	{Brendan Moran and Hannes Tschofenig and Henk Birkholz},
	title =		{{Firmware Updates for Internet of Things Devices - An Information Model for Manifests}},
	pagetotal =	29,
	year =		2018,
	month =		jul,
	day =		2,
	abstract =	{Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices. Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts. One component of such a firmware update is the meta-data, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes all the information that must be present in the manifest.},
}


@misc{stride, 
	title={The STRIDE Threat Model}, 
	url={https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee823878(v=cs.20)}, 
	journal={Microsoft Docs}, 
	author={Microsoft}, 
	year={2009}, 
	month=nov
} 